# GitLab CI/CD Pipeline for Java application

stages:
  - build
  - test
  - quality
  - security
  - package
  - deploy
  - integration
  - production

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  # Cache Maven dependencies between jobs
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

# Cache downloaded dependencies
cache:
  paths:
    - .m2/repository

build:
  stage: build
  image: maven:3.8.6-openjdk-11
  script:
    - mvn $MAVEN_CLI_OPTS clean compile

test:
  stage: test
  image: maven:3.8.6-openjdk-11
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    paths:
      - target/surefire-reports/
      - target/site/jacoco/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

code_quality:
  stage: quality
  image: maven:3.8.6-openjdk-11
  script:
    # Run SonarQube analysis
    - mvn $MAVEN_CLI_OPTS sonar:sonar
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.projectName=$CI_PROJECT_NAME
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
  only:
    - main
    - merge_requests

security_scan:
  stage: security
  image: maven:3.8.6-openjdk-11
  script:
    - mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check
  artifacts:
    paths:
      - target/dependency-check-report.html

package:
  stage: package
  image: maven:3.8.6-openjdk-11
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - target/*.jar

build_docker:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:latest -f docker/Dockerfile .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

deploy_dev:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker stop java-cicd-demo-dev || true
    - docker rm java-cicd-demo-dev || true
    - docker run -d --name java-cicd-demo-dev -p 8080:8080 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  environment:
    name: development
    url: http://dev.example.com

integration_test:
  stage: integration
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - curl -f http://dev.example.com/health || exit 1
  dependencies:
    - deploy_dev

deploy_prod:
  stage: production
  image: hashicorp/terraform:1.3
  script:
    - cd terraform
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  environment:
    name: production
    url: http://example.com
  only:
    - main
  when: manual